@model RestaurantManagementSystem.Application.DTOs.Order.OrderDto
@inject RestaurantManagementSystem.Application.Contracts.IServiceManager ServiceManager
@using RestaurantManagementSystem.Domain.Enums
@{
    ViewData["Title"] = "Edit Order";
    var menuItems = ViewBag.MenuItems as List<RestaurantManagementSystem.Application.DTOs.MenuItem.MenuItemDto>;
}

<h2 class="mb-4 text-primary text-center"><i class="fas fa-edit"></i> Edit Order</h2>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <form asp-action="Edit" method="post" class="needs-validation" novalidate>
                <input type="hidden" asp-for="Id" />
                <div class="mb-3">
                    <label asp-for="CustomerId" class="form-label">Customer ID</label>
                    <input asp-for="CustomerId" class="form-control" required />
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="OrderType" class="form-label">Order Type</label>
                    <select asp-for="OrderType" class="form-select" required>
                        <option value="">Select Type</option>
                        <option value="@OrderType.DineIn" selected="@(Model.OrderType == OrderType.DineIn)">DineIn</option>
                        <option value="@OrderType.Takeaway" selected="@(Model.OrderType == OrderType.Takeaway)">Takeaway</option>
                        <option value="@OrderType.Delivery" selected="@(Model.OrderType == OrderType.Delivery)">Delivery</option>
                    </select>
                    <span asp-validation-for="OrderType" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Status" class="form-label">Status</label>
                    <select asp-for="Status" class="form-select" required>
                        <option value="">Select Status</option>
                        <option value="@OrderStatus.Pending" selected="@(Model.Status == OrderStatus.Pending)">Pending</option>
                        <option value="@OrderStatus.Preparing" selected="@(Model.Status == OrderStatus.Preparing)">Preparing</option>
                        <option value="@OrderStatus.Ready" selected="@(Model.Status == OrderStatus.Ready)">Ready</option>
                        <option value="@OrderStatus.Delivered" selected="@(Model.Status == OrderStatus.Delivered)">Delivered</option>
                    </select>
                    <span asp-validation-for="Status" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="DeliveryAddress" class="form-label">Delivery Address</label>
                    <input asp-for="DeliveryAddress" class="form-control" />
                    <span asp-validation-for="DeliveryAddress" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Total" class="form-label">Total</label>
                    <input asp-for="Total" class="form-control" readonly />
                    <span asp-validation-for="Total" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label class="form-label">Order Items</label>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Menu Item</th>
                                <th>Quantity</th>
                                <th>Subtotal</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="orderItems">
                            @for (int i = 0; i < Model.OrderItems.Count; i++)
                            {
                                <tr>
                                    <td>
                                        <select class="form-control menuItemId" name="OrderItems[@i].MenuItemId" required>
                                            <option value="">Select Menu Item</option>
                                            @foreach (var item in menuItems)
                                            {
                                                <option value="@item.Id" selected="@(Model.OrderItems[i].MenuItemId == item.Id)">@item.Name (Price: $@item.Price.ToString("F2"))</option>
                                            }
                                        </select>
                                    </td>
                                    <td><input type="number" class="form-control quantity" name="OrderItems[@i].Quantity" value="@Model.OrderItems[i].Quantity" min="1" required /></td>
                                    <td><input type="number" class="form-control subtotal" name="OrderItems[@i].Subtotal" value="@Model.OrderItems[i].Subtotal.ToString("F2")" readonly /></td>
                                    <td><button type="button" class="btn btn-danger remove-item">Remove</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="button" class="btn btn-success add-item">Add Item</button>
                </div>
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a asp-action="Index" class="btn btn-secondary ms-2">Back to List</a>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let itemCount = @Model.OrderItems.Count;
            const menuItems = @Html.Raw(Json.Serialize(ViewBag.MenuItems));

            document.querySelector('.add-item').addEventListener('click', function () {
                const tbody = document.getElementById('orderItems');
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td>
                        <select class="form-control menuItemId" name="OrderItems[${itemCount}].MenuItemId" required>
                            <option value="">Select Menu Item</option>
                            @foreach (var item in menuItems)
                            {
                                    <option value="@item.Id">@item.Name (Price: $@item.Price.ToString("F2"))</option>
                            }
                        </select>
                    </td>
                    <td><input type="number" class="form-control quantity" name="OrderItems[${itemCount}].Quantity" min="1" required /></td>
                    <td><input type="number" class="form-control subtotal" name="OrderItems[${itemCount}].Subtotal" readonly /></td>
                    <td><button type="button" class="btn btn-danger remove-item">Remove</button></td>
                `;
                tbody.appendChild(newRow);
                itemCount++;
            });

            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-item')) {
                    e.target.closest('tr').remove();
                }
            });

            document.addEventListener('input', function (e) {
                if (e.target.classList.contains('menuItemId') || e.target.classList.contains('quantity')) {
                    const row = e.target.closest('tr');
                    const menuItemId = row.querySelector('.menuItemId').value;
                    const quantity = row.querySelector('.quantity').value;
                    if (menuItemId && quantity) {
                        const menuItem = menuItems.find(m => m.id == menuItemId);
                        const price = menuItem.discountedPrice ?? menuItem.price;
                        row.querySelector('.subtotal').value = (price * quantity).toFixed(2);
                    }
                }
            });
        });
    </script>
}